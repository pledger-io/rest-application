micronaut.application.name=Pledger.io
micronaut.application.storage.location=${java.io.tmpdir}

# Security configuration
micronaut.security.authentication=bearer
micronaut.security.token.jwt.enabled=true
micronaut.security.endpoints.logout.enabled=true
micronaut.security.endpoints.logout.get-allowed=true
micronaut.security.endpoints.login.enabled=true
micronaut.security.endpoints.oauth.enabled=true

micronaut.security.endpoints.oauth.path=/v2/api/security/oauth
micronaut.security.endpoints.login.path=/v2/api/security/authenticate
micronaut.security.endpoints.logout.path=/v2/api/security/logout

## Security secret and encryption
micronaut.application.security.secret=MyLittleSecret
micronaut.application.security.encrypt=true

# Setup static resources
micronaut.router.static-resources.docs.paths=classpath:docs
micronaut.router.static-resources.docs.mapping=/openapi/**
micronaut.router.static-resources.swagger.paths=classpath:META-INF/swagger
micronaut.router.static-resources.swagger.mapping=/spec/**

# Upload configuration
micronaut.server.multipart.enabled=true
micronaut.server.multipart.location=${micronaut.application.storage.location}/temp
micronaut.server.multipart.max-file-size=20971520

# Thread pool configuration
micronaut.executors.io.type=fixed
micronaut.executors.io.n-threads=50

# Email configuration
application.mail=mock

# AI vectors configuration
application.ai.vectors.storageType=memory
application.ai.vectors.pass-key=E5MC00ZWUxLWJiMm
application.ai.vectors.storage=${micronaut.application.storage.location}/vector_stores

# Metric configuration
micronaut.metrics.export.prometheus.enabled=true
micronaut.metrics.export.prometheus.step=PT1M
micronaut.metrics.export.prometheus.descriptions=true

# Metric endpoints
endpoints.metrics.enabled=true
endpoints.metrics.sensitive=false
endpoints.prometheus.enabled=true
endpoints.prometheus.sensitive=false
